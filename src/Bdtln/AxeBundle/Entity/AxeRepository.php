<?php

namespace Bdtln\AxeBundle\Entity;

/**
 * AxeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AxeRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * findAllWithProject() will find all axes and do a join to get the projects in only once query
     * @return ArrayCollection the list of all axes joined with their all projects
     */
    public function findAllWithProjects() {
        //Creating of querybuilder
        $queryBuilder = $this->_em->createQueryBuilder('a');
        //Select all from axe with a join between axe and project 
        $queryBuilder->select('a')
                ->from('BdtlnAxeBundle:Axe', 'a')
                ->leftJoin('a.projects', 'p')
                ->addSelect('p');

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * findAllNotInProject will find all the axes witch don't contain the given project
     * @param Project $project
     * @return ArrayCollection the list of axes
     */
    public function findAllNotInProject($project) {

        //Get all axes, joined with their projects
        $axes = $this->findAllWithProjects();
        //The axes witch don't belong to the project
        $axesNotInProject = array();
        /*
         * Look over all axes in order to display only the axes witch doesn't
         * own this project
         */
        for ($i = 0; $i < count($axes); $i++) {
            /* At eatch round of loop, $projectsOwnByThisAxe contains 
             * the projects owned by $axes[$i]
             */
            $projectsOwnedByThisAxe = $axes[$i]->getProjects()->toArray();
            if (!in_array($project, $projectsOwnedByThisAxe))
                $axesNotInProject[] = $axes[$i];
        }
        return $axesNotInProject;
    }
    
    
    /**
     * findOneAxeWithManagers will find the given axe joined with their managers
     * @param string $slugAxe
     * @return Axe if it exists, or null
     */
    public function findOneWithManagers($slugAxe) {
        
        //Creating of querybuilder
        $queryBuilder = $this->_em->createQueryBuilder('a');
        //Select all from axe with a join between axe and project 
        $queryBuilder->select('a')
                ->from('BdtlnAxeBundle:Axe', 'a')
                ->leftJoin('a.managers', 'm')
                ->addSelect('m')
                ->where('a.slug = :slug')
                ->setParameter(':slug', $slugAxe)
        ;
                
        return $queryBuilder->getQuery()->getOneOrNullResult();
        
        
    }

}
